diff -uprN host-bison-3.0.2/lib/fseterr.c host-bison-3.0.2.orig/lib/fseterr.c
--- host-bison-3.0.2/lib/fseterr.c      2024-08-26 14:08:50.184727897 +0800
+++ host-bison-3.0.2.orig/lib/fseterr.c 2024-08-26 14:08:23.188147123 +0800
@@ -29,7 +29,7 @@ fseterr (FILE *fp)
   /* Most systems provide FILE as a struct and the necessary bitmask in
      <stdio.h>, because they need it for implementing getc() and putc() as
      fast macros.  */
-#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
+#if defined _IO_EOF_SEEN || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
   fp->_flags |= _IO_ERR_SEEN;
 #elif defined __sferror || defined __DragonFly__ /* FreeBSD, NetBSD, OpenBSD, DragonFly, Mac OS X, Cygwin */
   fp_->_flags |= __SERR;
diff -uprN host-bison-3.0.2/lib/stdio-impl.h host-bison-3.0.2.orig/lib/stdio-impl.h
--- host-bison-3.0.2/lib/stdio-impl.h   2024-08-26 14:08:50.184727897 +0800
+++ host-bison-3.0.2.orig/lib/stdio-impl.h      2024-08-26 14:08:23.188147123 +0800
@@ -18,6 +18,13 @@
    the same implementation of stdio extension API, except that some fields
    have different naming conventions, or their access requires some casts.  */
 
+/* Glibc 2.28 made _IO_IN_BACKUP private.  For now, work around this
+   problem by defining it ourselves.  FIXME: Do not rely on glibc
+   internals.  */
+#if !defined _IO_IN_BACKUP && defined _IO_EOF_SEEN
+# define _IO_IN_BACKUP 0x100
+#endif
+
 
 /* BSD stdio derived implementations.  */
